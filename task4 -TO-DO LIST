
//task4 to do list 
// input 

 #include <string>
#include <vector>
#include<iostream>
using namespace std;

struct Task {
  string description;
  bool isCompleted;
};

void displayMenu();
void addTask(vector<Task> &tasks);
void viewTasks(const vector<Task> &tasks);
void markTaskAsCompleted(vector<Task> &tasks);
void removeTask(vector<Task> &tasks);

int main() {
  vector<Task> tasks;

  int choice;
  do {
    displayMenu();
    cout<< "Enter your choice: ";
    cin >> choice;

    switch (choice) {
    case 1:
      addTask(tasks);
      break;
    case 2:
      viewTasks(tasks);
      break;
    case 3:
      markTaskAsCompleted(tasks);
      break;
    case 4:
      removeTask(tasks);
      break;
    case 5:
      cout << "Exiting the program.\n";
      break;
    default:
      cout << "Invalid choice. Please try again.\n";
      break;
    }

  } while (choice != 5);

  return 0;
}

void displayMenu() {
  cout << "\n==== TO-DO LIST MANAGER ====\n";
  cout << "1. Add Task\n";
  cout << "2. View Tasks\n";
  cout << "3. Mark Task as Completed\n";
  cout << "4. Remove Task\n";
  cout << "5. Exit\n";
}

void addTask(vector<Task> &tasks) {
  Task newTask;
  cout << "Enter the description of the new task: ";
  cin.ignore(); // Clear the input buffer
  getline(cin, newTask.description);
  newTask.isCompleted = false;
  tasks.push_back(newTask);
  cout << "Task added successfully.\n";
}

void viewTasks(const vector<Task> &tasks) {
  cout << "\n==== TASKS ====\n";
  if (tasks.empty()) {
    cout << "No tasks available.\n";
  } else {
    for (size_t i = 0; i < tasks.size(); ++i) {
      cout << i + 1 << ". ";
      if (tasks[i].isCompleted) {
        cout << "[X] ";
      } else {
        cout << "[ ] ";
      }
      cout << tasks[i].description << "\n";
    }
  }
}

void markTaskAsCompleted(vector<Task> &tasks) {
  viewTasks(tasks);

  if (!tasks.empty()) {
    int taskIndex;
    cout << "Enter the number of the task to mark as completed: ";
    cin >> taskIndex;

    if (taskIndex >= 1 && taskIndex <= static_cast<int>(tasks.size())) {
      tasks[taskIndex - 1].isCompleted = true;
      cout << "Task marked as completed.\n";
    } else {
      cout << "Invalid task number.\n";
    }
  }
}

void removeTask(vector<Task> &tasks) {
  viewTasks(tasks);

  if (!tasks.empty()) {
    int taskIndex;
    cout << "Enter the number of the task to remove: ";
    cin >> taskIndex;

    if (taskIndex >= 1 && taskIndex <= static_cast<int>(tasks.size())) {
      tasks.erase(tasks.begin() + taskIndex - 1);
      cout << "Task removed successfully.\n";
    } else {
      cout << "Invalid task number.\n";
    }
  }
}


//output 
==== TO-DO LIST MANAGER ====
1. Add Task
2. View Tasks
3. Mark Task as Completed
4. Remove Task
5. Exit
Enter your choice: 1
Enter the description of the new task: complete work
Task added successfully.

==== TO-DO LIST MANAGER ====
1. Add Task
2. View Tasks
3. Mark Task as Completed
4. Remove Task
5. Exit
Enter your choice: 2

==== TASKS ====
1. [ ] complete work

==== TO-DO LIST MANAGER ====
1. Add Task
2. View Tasks
3. Mark Task as Completed
4. Remove Task
5. Exit
Enter your choice: 3

==== TASKS ====
1. [ ] complete work
Enter the number of the task to mark as completed: 1
Task marked as completed.
==== TO-DO LIST MANAGER ====
1. Add Task
2. View Tasks
3. Mark Task as Completed
4. Remove Task
5. Exit
Enter your choice: 
